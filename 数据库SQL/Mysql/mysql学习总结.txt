语法检查。语义检查。权限检查。共享池找，没有，进行硬解析，有，软解析，执行器执行。
from
join-on
where
group by
avg,sum
having
select
distinct
order by

选择的方法在于要让小表驱动大表：
看执行计划，先执行的为驱动表


事务隔离（有四种等级）：
	读未提交，读已提交，可重复度， 串行化
	脏读：没commit就看到了数据，不可重复度：再次查询数据修改，幻读：再次查找数据增加了


悲观锁与乐观锁（开发思维模式）：
	乐观锁：给数据加一个版本号或者时间戳。进行写操作的适合比较当前数据的时间戳与服务器上的时间戳是否一致，适合读操作多的场景
	悲观锁：适合写操作多的场景，因为写操作具有排他性	
	有锁的存在必然就会发生死锁，这里与多线程比较即可

从数据库管理角度分：共享锁（允许其他用户读）与排他锁（不允许任何操作，只能wait）
	行锁，页锁，表锁
	--意向锁，给更大一个级别的空间一个表示。如果设置了行锁，则会设置表锁告诉别人表内数据被锁，不用逐条找哪一条数据上锁

调优的方法：
	1.选择dbms
	2.表的设计（尽量采用第三范式，有时为了效率会反范式：比如数据仓库，多为查询）1.字段不可分割 2.非主属性完全依赖候选键3.非主属性不传递依赖候选键		
	3.逻辑查询优化：sql等价交换
	4.物理查询优化：加索引等	如果索性重复度高，如性别。联合索性遵行最左规则
	5.加缓存：redis等
	6.库级优化：主从表，水平垂直切分。水平切分用于数据量很大时，可以根据时间比如年限来分割。垂直切分顾名思义就是垂直方向上，对于列切分，把常用的列分到一起。

回表：
	在sql优化时，宽索引可以避免回表，但是也要主要索引的增加是否会带来巨大的维护代价，具体情况分析吧
	索引没有对select表后面的字段进行完全覆盖，就会返回原表中找到这些字段的数据

B+与B树：
	因为B+树非叶子节点不储存数据，数据都储存在叶子节点。所以B+树会比B树更矮胖，所以也就更稳定，效率也更高
	B+树叶子节点之间是链表的连接方式，这也是效率更高的一方面。范围查询会更方便

hash索引：
	mysql中InnoDB储存引擎采用自适应hash索引。把一些经常访问的热数据加载到内存中，时间复杂为O(1)
	多表连接也可使用hash连接，但hash只适用=，!=, in  in后面的数据也不宜过多

索引：
	频繁作为where过滤条件的可以加上索引。
	经常需要group by， order by的列
	多个单列索引在多条件查询只会生效一个索引，dbms会选择最严格的作为索引
	联合索引中，前面条件如果是范围查询会导致后面无法使用索引：
		如果联合索引为（x,y,z），谓词条件为y=，z=，x=，优化器会自动帮我们调整顺序

	三星索引：但是要选择最适合的方式，过量的加索引会导致维护起来代价巨大。特别是频繁进行增删的表


储存结构：myqsl页，区，段（表段，索引段），表空间。oracle中为块，区段表空间
表空间：共享表空间（数据文件放一起方便管理，做大量删除后会有大量空隙）与独立表空间（单表增加过大，但性能相比优一点）
页：
	文件头和文件尾：在数据传输的适合，如果突然死机，文件头和文件尾信息不一致，表示传输失败
	最大最小记录，空闲部分，用户记录：用来存放数据
	页目录：索引	--因为是单向链表的方式存储，所以增加页目录通过二分查找增加查找效率。数据被删除会标记已删除，直到被覆盖
页是数据操作的最小单位


磁盘I/O消耗的时间很多，要尽量在内存中操作。我们读取数据的时候dbms会先在内存申请一块缓冲池，先把数据读到缓冲池中（这里为了增加效率，可能会预读，就是把数据旁边的数据给读下来）
在进行数据修改时，会先在缓冲池中修改。缓冲池会采用一种叫checkpoint的机制，以一定频率把数据写回数据库


优化器：RBO（就想老司机，根据经验）， CBO（计算代价），现在都是CBO基于代价的比较常用了
	优化器的两个阶段：
		逻辑查询优化：改变sql语句内容使得sql更高效，，为物理查询优化提供多种方案
		物理查询优化：关系代数每一步对应物理计算，有多种算法，选择代价最小的一种
	1.用explain查看对应sql语句的执行计划：执行顺序，id越大越先执行，id相同从下往下
	2.show profile查看sql每个步骤的时间
		show profile查看sql_ID,然后选择id查看具体信息，show profile for query ID

数据库访问类型：
	慢all全数据<index全索引<range索引列范围<index_merge合并索引<ref根据索引查找一个或多个值<eq_ref使用pk或unique<const最多就一行
	至少达到range被认为是合格


数据库主从同步：
	基于三个线程：
		1.二进制日志转储线程：把数据的修改都记录在这，event
		2.从库I/O线程，连接主库的时候，更新binlog文件
		3.从库sql线程，读取从库中继文件，并且执行sql文件中的事件		
	作用：读写分离，高可用，数据备份
	这里就会存在一个主库数据更新，然后从库从主库中更新数据的实时性问题
	主要解决方法：
		半同步复制：commit之后至少等一个从库接受到了binlog，并且写入到中继日志中，再进行返回给客户端。有点就是解决了数据不同步的问题，但是网络连接的延迟增加了
		组复制：要组内大部分人同意才能提交，对网络要求高


redis：内存数据库
python中redis事务是封装在pipeline中，方法：multi， execute， watch， unwatch。
事务执行前，watch监视的键如果发生变化就会导致事务被打断，这里的变化不论是数值还是版本号或者时间戳发生变化。
采用的是乐观锁的编程思想，所以如果修改的值不变，但是时间戳或版本号也会发生改变，导致监视的键被改变，中断事务
在execute执行事务之前，如果增加的watch监视，监视的值被修改了，都会导致事务终端。
没有使用watch，调用execute就会执行所有事务
redis是单线程。所以一个事务在执行，其他事务不允许执行。


ETL:
	从OLTP系统中把数据通过抓取，清洗处理等，load到OLAP系统中。




MYSQL：
	1.给字符串字段加索引：
		前缀索引：比如邮箱字段，身份证字段。可以通过hash，或者反向存储身份证号再用前缀字段
	2.InnoDB引擎与MyISAM比较：
		MyISAM：它是基于传统的ISAM类型，ISAM是Indexed Sequential Access Method (有索引的顺序访问方法) 的缩写，它是存储记录和文件的标准方法。
			不是事务安全的，而且不支持外键，如果执行大量的select，insert MyISAM比较适合。
		InnoDB：支持事务安全的引擎，支持外键、行锁、事务是他的最大特点。如果有大量的update和insert，建议使用InnoDB，特别是针对多个并发和QPS较高的情况。
	3.表的自增ID到达上限后会如何：
		表的自增id到达上限就会从头开始，如果id相同则会报错
		没有设置自增id，mysql会自动设置一个row_id,如果row_id到达上限，也是从头开始，但id相同，之前的会被覆盖
	4.kill不掉的语句
		kill只是让这个语句暂停，里面占有的锁并不会释放。
	5.自增id为什么不是连续的
		事务回滚等原因都会让id不连续
	6.redo log与binlog
		redo log是InnoDB特有的，是crash-safe的。
		inoodb_flush_log_at_trx_commit 参数设置成1，表示每次事务的redo log都直接持久到磁盘。可以保证Mysql异常重启后数据不丢失
		sync_binlog 参数设置成1的时候，表示每次事务的binlog都持久化到磁盘，可以保证MySQL异常重启后binlog不丢失、
	7.索引
		索引类型分为主键索引和非主键索引。
		主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。
		非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。
			如果根据二级索引查，二级索引的B+树的叶子节点储存的是ID，查到ID后再回ID的B+树去查，这叫回表
	8.锁
		--全局锁：FTWRL，使用时整个库处于锁的状态，MDL，DDL语句都会造成堵塞
			对整个数据库加锁，命令：Flush tables with read lock（FTWRL）
		--表级锁：对表进行上锁。读写堵塞
			表锁的语法是 lock tables … read/write。释放锁的语法 unlock tables
		--MDL锁：不用显示使用，访问表时自动。读锁之间不互斥，多个线程可以同时对一张表增删改查，读写锁之间、写锁之间互斥，来保证变更表结构操作的安全性
	9.InnoDB与MyISAM的count(*)
		MyISAM引擎把一个表的总行数存在了磁盘上，因此执行count(*)的时候会直接返回这个数，效率很高；
		而InnoDB引擎就麻烦了，它执行count(*)的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。
		但是MyISAM是不支持事务的
	10.为什么逻辑相同的sql，性能差别很大
		对字段进行计算，会使索引失效。还有一个就是模糊查询时，尽量不要%开头，也会使索引失效
	11.只查询一行数据，也很慢
		--1.要查询的表被锁定未被释放
		--2.在查询时，比如进行了修改，等待修改完成。可以在使用当前读，带lock in share mode的SQL语句
									