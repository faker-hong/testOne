 DELIMITER //

USE `etl_test`//

DROP PROCEDURE IF EXISTS `node_move`//

CREATE PROCEDURE `node_moce`(
	node_old_parent_id INT UNSIGNED,
	node_new_parent_id INT UNSIGNED
)COMMENT 'move node to a new location'
-- If parent_id has chanaged
-- 1. Delete the paths between moved node and old ancestors
-- 2. Add the paths between moved node and new ancestors
BEGIN
  DELETE
    a
  FROM 
    `prefix_nodes_paths` a
    JOIN `prefix_nodes_paths` d ON a.`descendant_id` = d.`descendant_id`
    JOIN `prefix_nodes_paths` x ON  x.`ancestor_id` = d.`ancestor_id`  AND x.`descendant_id` = a.`ancestor_id`
  WHERE d.`ancestor_id` = `node_old_parent_id`
    AND x.`ancestor_id` IS NULL;


  INSERT INTO `prefix_nodes_paths`(
	`ancestor_id`,
	`descendant_id`,
	`path_length`
)
  SELECT
    supertree.`ancestor_id`,
    subtree.`descendant_id`,
    supertree.`path_length` + subtree.`path_length` + 1
  FROM
    `prefix_nodes_paths` AS supertree
    JOIN `prefix_nodes_paths` AS subtree ON supertree.`descendant_id` = subtree.`descendant_id`
  WHERE subtree.`ancestor_id` = `node_old_parent_id`
    AND supertree.`descendant_id` = `node_new_parent_id` ;
END//

DELIMITER ; 